name: "goose ai developer agent"
description: "Uses goose AI to help you fix issues and implement your code from just a description"
inputs:
  task_request:
    description: 'Task request for Goose AI to complete'
    required: true
  validation:
    description: 'Instructions for how to test to confirm changes are okay'
    required: true
  create_pr:
    description: 'Optionally create a Pull Request (true/false)'
    required: true

runs:
  using: "composite"
  steps:

    - name: Prepare tools 
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y ripgrep curl git jq wget pipx

    - name: Ensure pipx path
      run: pipx ensurepath
      shell: bash

    - name: Add pipx to PATH
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      shell: bash

    - name: Install Goose AI
      run: pipx install goose-ai
      shell: bash


    - name: Create plan.yaml
      shell: bash
      run: |
        printf "%s\n" \
          "kickoff_message: |" \
          "  This will follow tasks as given for the project and then try to complete them without input." \
          "  The tasks may be an enhancement, or a bug fix which came from an issue tracker." \
          "" \
          "tasks:" \
          "  - you are running in a CI-style environment and aim to try to complete the task assigned; the result will be changes to the code that are verified." \
          "  - keep iterating to completion until the task is satisfied, and tests are run." \
          "  - you will not be able to ask the user to take any steps, you have to do this on your own. You can do research (curl websites as needed)." \
          "  - decide if you are working on net new code or existing code." \
          "  - Try a at least 3 approaches if uiu firys fail, not not just stop. " \
          "  - use '&' if you need to run processes in the background as part of testing." \
          "  - Read ./task.txt for instructions on what issue(s) to do or fix, and then read ./validation.txt for how to know if the change or fix is working." \
          "  - if successful, write to a file ./success; if a failure, to ./failure" \
          > plan.yaml

    - name: Create task.txt and validation.txt
      shell: bash
      run: |
        echo "${{ inputs.task_request }}" > task.txt
        echo "${{ inputs.validation }}" > validation.txt

    - name: Run Goose Session
      shell: bash
      run: |
        set -e

        echo "Task Request: ${{ inputs.task_request }}" > task.txt
        echo "Validation: ${{ inputs.validation }}" > validation.txt

        # Start the Goose session in the background
        cd "$GITHUB_WORKSPACE"

        goose session start --plan plan.yaml &
        GOOSE_PID=$!

        # Poll for success or failure file
        while true; do
          if [ -f ./success ]; then
            echo "Goose session succeeded"
            rm -f task.txt validation.txt success failure plan.yaml
            # Ensure to kill Goose process
            kill -9 $GOOSE_PID || true
            exit 0
          elif [ -f ./failure ]; then
            echo "Goose session failed"
            # Ensure to kill Goose process
            kill -9 $GOOSE_PID || true
            exit 1
          fi
          if ! ps -p $GOOSE_PID > /dev/null 2>&1; then
            echo "Goose process is no longer running"
            exit 1
          fi
          sleep 10  # Adjust the sleep interval as needed
        done

        # Ensure to kill Goose process at the end
        kill -9 $GOOSE_PID || true

    - name: Generate branch, commit, push, and create pull request
      if: ${{ inputs.create_pr == 'true' }}
      shell: bash
      env:
          GH_TOKEN: ${{ github.token }}      
      run: |
        # Generate a slug from the issue title, replacing spaces with dashes and ensuring lowercase
        SLUG=$(echo "${{ github.event.issue.title }}" | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | tr -cd '[:alnum:]-')
        
        # Construct the full branch name
        BRANCH_NAME="goose-ai/$SLUG-$(date +%s)"

        # Check out a new branch using the dynamically generated name
        git checkout -b $BRANCH_NAME

        # Configure git user
        git config --global user.email "goose-ai@block.xyz"
        git config --global user.name "goose"

        # Add and commit changes
        git add .
        git commit -m "changes from goose"

        # Push the branch to the remote repository
        git push origin $BRANCH_NAME

        # Create a pull request using the GitHub CLI
        gh pr create --head $BRANCH_NAME --title "${{ github.event.issue.title }}" --body "Resolves issue: ${{ github.event.issue.html_url }} ${{ github.event.issue.body }} "        
